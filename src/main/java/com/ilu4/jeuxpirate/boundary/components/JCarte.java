package com.ilu4.jeuxpirate.boundary.components;

import com.ilu4.jeuxpirate.boundary.Plateau;
import java.awt.BasicStroke;
import java.awt.Component;
import java.awt.Container;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Point;
import java.awt.RenderingHints;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.SwingUtilities;
import javax.swing.Timer;

public class JCarte extends javax.swing.JPanel {
    private Image frontCard;
    private Image backCard;
    private boolean isFront = false;
    private Point origine = null;
    private boolean isSelected = false;
    
    
    /**
     * Creates new form JCarte
     */
    public JCarte() {
        initComponents();
        double w = getWidth();
        double h = w*1.4;
        setSize((int)w, (int)h);
    }

    
    @Override 
    protected void paintComponent(Graphics g){
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        
        if(isFront && frontCard != null){
            g2d.drawImage(frontCard, 0,0, getWidth(), getHeight(), this);
        }else if (backCard != null){
            g2d.drawImage(backCard, 0,0, getWidth(), getHeight(), this);
        }
        
        g2d.dispose();
    }
    
    public Point getCentreCarte() {
        return new Point(getX() + getWidth() / 2, getY() + getHeight() / 2);
    }
    
    public void changeCardFace(){
        isFront = !isFront;
    }
    
    public void setImage(String cardName) throws IOException {
        backCard = ImageIO.read(new File("src/main/java/com/ilu4/jeuxpirate/boundary/ressources/" + "Card1Back.png"));
        frontCard = ImageIO.read(new File("src/main/java/com/ilu4/jeuxpirate/boundary/ressources/" + cardName));
    }
  
//Projet pour faire les effet de particule    
public void deplacerVers(int xFinal, int yFinal) {
    Timer timer = new Timer(10, null);
    timer.addActionListener(e -> {
        int x = getX();
        int y = getY();
        int dx = (xFinal - x) / 5;
        int dy = (yFinal - y) / 5;

        if (Math.abs(xFinal - x) < 2 && Math.abs(yFinal - y) < 2) {
            setLocation(xFinal, yFinal);
            timer.stop();
        } else {
            setLocation(x + dx, y + dy);
        }
    });
    timer.start();
}    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 134, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 188, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        if (origine != null) {
            int thisX = this.getLocation().x;
            int thisY = this.getLocation().y;

            int xMoved = evt.getX() - origine.x;
            int yMoved = evt.getY() - origine.y;

            int X = thisX + xMoved;
            int Y = thisY + yMoved;

            this.setLocation(X, Y);
            this.repaint();
            // regle affichage des élements en dessous de la carte
            for (Component comp : getParent().getComponents()) {
                if (comp instanceof JCarte && comp != this) {
                    comp.repaint(); // Force les autres cartes à se redessiner si touchées
                }
            }
        }
    }//GEN-LAST:event_formMouseDragged

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        this.origine = evt.getPoint();
	this.isSelected = true;
        repaint();
        SwingUtilities.getWindowAncestor(this).setComponentZOrder(this, 0);
    }//GEN-LAST:event_formMousePressed

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        origine = null;
	this.isSelected = false;
        repaint();
        Container root = SwingUtilities.getWindowAncestor(this);
        if (root instanceof Plateau plateau) {
             plateau.getGestionnaire().verifierToutesZones(this); // C’est bien la méthode du gestionnaire
        }
        //détecte pas getGestionnaire ?
    }//GEN-LAST:event_formMouseReleased

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        if (evt.getClickCount() == 2 && isFront && frontCard != null) {
        // Crée une fenêtre modale pour afficher la carte en grand
        javax.swing.JDialog dialog = new javax.swing.JDialog();
        dialog.setTitle("Carte en grand");
        dialog.setModal(true);
        dialog.setDefaultCloseOperation(javax.swing.JDialog.DISPOSE_ON_CLOSE);

        // Redimensionne l'image (ex. 3x plus grande)
        int width = frontCard.getWidth(this) * 3;
        int height = frontCard.getHeight(this) * 3;
        Image scaledImage = frontCard.getScaledInstance(width, height, Image.SCALE_SMOOTH);

        // Met l'image dans un JLabel
        javax.swing.JLabel label = new javax.swing.JLabel(new javax.swing.ImageIcon(scaledImage));
        dialog.getContentPane().add(label);

        dialog.pack();
        dialog.setLocationRelativeTo(this); // Centré sur la carte
        dialog.setVisible(true);
    }
    }//GEN-LAST:event_formMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
